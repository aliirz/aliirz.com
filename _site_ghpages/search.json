[
  
    {
      "title"    : "Mastering Markdown; A Cheatsheet from a Dev Who Loves Markdown (But Keeps Googling It)",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/markdown-cheatsheet'>Mastering Markdown; A Cheatsheet from a Dev Who Loves Markdown (But Keeps Googling It)<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2024-06-26T20:54:00+05:00'>26 June 2024</time> – <span class='article__minutes'>2min read</span> </div><p class='article__excerpt'>The one time I created a markdown cheatsheet and blogged about it.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/cheat-sheet' class='article__tag'>cheat-sheet</a><a href='/tag/markdown' class='article__tag'>markdown</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "cheat-sheet and markdown",
      "url"      : "/markdown-cheatsheet",
      "date"     : "2024-06-26 20:54:00 +0500",
      "content"  : "I have a deep love for Markdown .It’s the magical tool that turns plain text into beautifully formatted documents. But here’s a little secret: even with over 10 years in tech, I still find myself googling how to format Markdown. So, I decided to write this cheatsheet to end my relentless web searchesHeadersUse `#` for headers. The number of `#` symbols at the beginning of the line indicates whether it's a heading 1, 2, 3, etc.# H1## H2### H3#### H4##### H5###### H6EmphasisUse * or _ for emphasis.*italic* or _italic_**bold** or __bold__***bold and italic*** or ___bold and italic___ListsUnordered ListUse -, *, or + for unordered lists.- Item 1- Item 2  - Item 2a  - Item 2bOrdered ListUse numbers for ordered lists.1. Item 12. Item 2   1. Item 2a   2. Item 2bLinksUse [text](URL) for links.[Ali Raza](https://www.aliirz.com)ImagesUse ![alt text](URL) for images.![Markdown Logo](https://markdown-here.com/img/icon256.png)BlockquotesUse &gt; for blockquotes.&gt; This is a blockquote.CodeInline CodeUse backticks for inline code.`code`Code BlocksUse triple backticks for code blocks.```javascriptfunction helloWorld() {console.log("Hello, world!");}```Horizontal RulesUse ---, ***, or ___ for horizontal rules.---***___TablesUse | to create tables.| Header 1 | Header 2 ||----------|----------|| Cell 1   | Cell 2   || Cell 3   | Cell 4   |StrikethroughUse ~~ to strikethrough text.~~This was a mistake.~~Task ListsUse - [ ] for task lists.- [x] Completed task- [ ] Incomplete taskFootnotesUse [^1] for footnotes.Here is a footnote reference[^1].EmojiUse colons to include emoji.:smile: :+1: :heart:"
    } ,
  
    {
      "title"    : "Building a PDF Chatbot",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/doc-sleek-talk-to-your-pdf-file'>Building a PDF Chatbot<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2024-06-03T14:03:00+05:00'>03 June 2024</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>The one time I built a chatbot that lets you talk to a PDF file. A fun project combining GPT-4, Bun, Next.js, and ShadCN/Tailwind part of my commitment to 100 days of AI.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/chatbot' class='article__tag'>chatbot</a><a href='/tag/gpt-4' class='article__tag'>gpt-4</a><a href='/tag/bun' class='article__tag'>bun</a><a href='/tag/next.js' class='article__tag'>next.js</a><a href='/tag/tailwind' class='article__tag'>tailwind</a><a href='/tag/100-days-of-ai' class='article__tag'>100-days-of-ai</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "chatbot, gpt-4, bun, next.js, tailwind, and 100-days-of-ai",
      "url"      : "/doc-sleek-talk-to-your-pdf-file",
      "date"     : "2024-06-03 14:03:00 +0500",
      "content"  : "I’ve been quietly working on a personal challenge: 100 days of AI. As part of this journey, I built a chatbot that lets you chat with a PDF file. Using GPT-4 and the Assistants API, my bot can help you interact with the content of any PDF you upload.I used Bun, Next.js, GPT-4o, and ShadCN/Tailwind. It’s been a fun and rewarding experience combining these technologies to create something I’ve always wanted to.Here is a demo:Feel free to explore the code on GitHub!https://github.com/Boost-Panda/sleek-doc-apihttps://github.com/Boost-Panda/sleek-doc-ui"
    } ,
  
    {
      "title"    : "Using Google Gemini to build Karachi Chal",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/karachi-chal'>Using Google Gemini to build Karachi Chal<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2024-05-05T19:03:00+05:00'>05 May 2024</time> – <span class='article__minutes'>6min read</span> </div><p class='article__excerpt'>The one time I built something for Karachi, the city of lights. A labor of love for my mother&#39;s city. Also how to use Google Gemini to build an AI-powered city guide.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/karachi' class='article__tag'>karachi</a><a href='/tag/ai' class='article__tag'>ai</a><a href='/tag/city-guide' class='article__tag'>city-guide</a><a href='/tag/open-source' class='article__tag'>open-source</a><a href='/tag/llm' class='article__tag'>llm</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "karachi, ai, city-guide, open-source, and llm",
      "url"      : "/karachi-chal",
      "date"     : "2024-05-05 19:03:00 +0500",
      "content"  : "The Inspiration SparkPicture this: I’m on a flight to Karachi, a megacity I’ve always felt a connection to, when it hits me. The sheer scale of the place, the energy – there had to be a better way to navigate it than generic travel guides. Enter Karachi Chal, my AI-powered itinerary planner! Sometimes, even when you think you’re escaping work to clear your head, inspiration strikes in the most unexpected places. That flight to Karachi turned into an accidental coding adventure! With its bustling streets and hidden gems, I knew there had to be a way to help visitors – and tourists like myself – experience the city’s true spirit. Powered by Google’s Gemini API, it quickly became more than a side project; it was a deep dive into building web apps with the power of advanced language models.Gemini API: Your AI CopilotGemini is a super-smart language model from Google AI that can generate text, translate languages, write different kinds of creative content, and answer your questions in an informative way. It also has multimodal capabilities.For Karachi Chal, I needed more than just an AI that could spit out search results. Gemini’s the perfect fit because it can understand complex requests and go beyond the typical tourist traps. For example, if a user asks, “Help me find offbeat Karachi experiences, things most tourists wouldn’t know about. I am here for 3 days,” Gemini could tap into its knowledge of Karachi to suggest.The Code Behind the MagicLet’s start by bringing in the necessary tools. The first line imports the core Gemini functionalities from Google’s library. MarkdownIt will help us format the AI’s responses for the web, and your style.css keeps everything looking good. Of course, we need your super-secret API key to communicate with Gemini!import { GoogleGenerativeAI, HarmBlockThreshold, HarmCategory } from "@google/generative-ai"; // Bringing in the tools to work with Geminiimport MarkdownIt from 'markdown-it'; // Library to make the AI's output look niceimport './style.css'; // Your API Key - Keep it Safe!let API_KEY = import.meta.env.VITE_GEMINI_KEY;This is where I teach Gemini how to be the ultimate Karachi travel guide. By setting the ‘role’ to ‘user’, I’m making sure the AI understands this input is coming from someone asking for help. Inside the ‘parts’ is where I’ll carefully craft instructions for creating the perfect itinerary:let contents = [    {        role: 'user',        parts: [                    // Your prompt text here                 ]        }    }];Now here is the real Jugaar (hack), the prompt that makes Karachi Chal tick:let contents = [    {        role: 'user',        parts: [                    { text:  `You are a knowledgeable travel guide specializing in Karachi.                     When a visitor asks you about their upcoming trip using the                     variable "${promptInput.value}", provide a comprehensive response.                     Include detailed daily itineraries, top dining spots, and must-see attractions.                     Ensure you account for travel logistics, such as travel times and                     operational hours of venues.` }                ]        }    }];One of the coolest parts of building with AI is those ‘aha!’ moments. Gemini works by sending a stream of text rather than a single block, and figuring out how to handle that on the fly was a big win! Working with Markdown to make everything look good on the website added another layer to the challenge.The End ResultFor the input we used above, here is how Karachi Chal would respond:Day 1: Discovering Karachi's Quirky SideMorning:Start your day by visiting the ethereal Khuda Ki Basti (God's Colony), a unique neighborhood adorned with vibrant street art and murals by local and international artists. Spend about an hour exploring its colorful streets.Afternoon:Head to the bustling Tower Market for a sensory overload. Wander through its maze-like alleys, marveling at the vibrant fabrics, handicrafts, and delicious street food. Allow 2-3 hours for shopping and lunch.Evening:Immerse yourself in the local culture at Pakka Qila (Association of the Faithful). Witness traditional wrestling matches or indulge in mouthwatering street delicacies at this vibrant public space. Stay for about 2 hours.Day 2: Architectural Wonders and Culinary DelightsMorning:Explore the grandeur of the Frere Hall (City Library), a majestic Gothic Revival building. Admire its intricate architecture and delve into its extensive collection of books. Visit for approximately 2 hours.Afternoon:Visit the picturesque Haleji Lake, a serene wetland home to diverse birdlife. Take a boat ride or stroll along its scenic shores, enjoying the tranquil atmosphere. Allow 3-4 hours for this excursion.Evening:Indulge in authentic Sindhi cuisine at Sohni Dharti Restaurant. Savor flavorsome dishes like sajji (grilled meat) and bhel puri (spicy puffed rice). Dinner takes about 2 hours.Day 3: The Soul of KarachiMorning:Discover the fascinating history and culture of Karachi at the Pakistan Maritime Museum. Explore its exhibits on naval history, marine life, and the role of the Pakistani Navy. Plan for 2-3 hours at the museum.Afternoon:Immerse yourself in the vibrant atmosphere of Kemari Town, a historic fishing village. Witness the bustling fish market, interact with friendly locals, and savor fresh seafood at roadside stalls. Dedicate 2-3 hours to this experience.Evening:End your Karachi adventure at the Mohatta Palace, a stunning palace built in the Rajput architectural style. Admire its intricate carvings and serene gardens, while enjoying a memorable dinner at its in-house restaurant. Allow 2-3 hours for dinner and exploration.Travel Logistics:Getting Around: Use ride-sharing apps like Careem or Uber for convenient transportation.Local Transport: Explore the city by rickshaw for an authentic experience.Travel Times: Factor in approximately 30-60 minutes for travel between attractions.Operating Hours: Venues typically open around 9 AM and close between 6 PM and 9 PM. Check specific venues for exact hours.The possibilities are endless with Karachi Chal! Think about tweaking the prompt for a budget-friendly trip, a focus on Karachi’s art scene, or even adding a time-of-year element (festival season vs. quieter months).If you’re a coder, data enthusiast, or just bursting with ideas to make Karachi Chal even better, join the adventure! Let’s turn this AI itinerary planner into the ultimate Karachi travel companion. Check out the GitHub Repo and the Website if you want to contribute or just explore the project."
    } ,
  
    {
      "title"    : "ZenPad, A Minimal Markdown Editor for Distraction-Free Writing",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/zen-pad.minimal-markdown-editor'>ZenPad, A Minimal Markdown Editor for Distraction-Free Writing<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2024-03-24T00:51:00+05:00'>24 March 2024</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>The one time I made a markdown editor for myself</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/markdown' class='article__tag'>markdown</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "markdown",
      "url"      : "/zen-pad.minimal-markdown-editor",
      "date"     : "2024-03-24 00:51:00 +0500",
      "content"  : "I recently launched Zenpad, inspired by my search for a distraction-free writing tool that’s straightforward yet powerful. Despite trying various platforms, I found them lacking in simplicity, prompting me to create Zenpad. Designed for writers who value focus, it requires no sign-up or sign-in, embodying the essence of minimalism.My philosophy is simple: if you can’t find the right tool, it’s time to build it. Zenpad stands as a testament to this belief, offering a clean, user-centric writing experience. Here’s to celebrating the spirit of open-source innovation and the joy of crafting tools that resonate with our needs."
    } ,
  
    {
      "title"    : "Sora, A New Horizon in AI-Generated Video Content",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/openai-sora'>Sora, A New Horizon in AI-Generated Video Content<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2024-02-15T23:20:00+05:00'>15 February 2024</time> – <span class='article__minutes'>2min read</span> </div><p class='article__excerpt'>The one time openai released sora</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/openai' class='article__tag'>openai</a><a href='/tag/sora' class='article__tag'>sora</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "openai and sora",
      "url"      : "/openai-sora",
      "date"     : "2024-02-15 23:20:00 +0500",
      "content"  : "Like a RKO out of nowwhere, OpenAI has unveiled Sora, a AI model designed to transform text instructions into realistic and imaginative video scenes. This launch marks a significant milestone in AI’s capability to understand and simulate the physical world in motion, opening up unprecedented possibilities for creators across the globe.What is Sora?Sora is not just any AI model; it is a technology capable of generating up to a minute-long videos that maintain visual quality and adhere closely to the given prompts. Developed by OpenAI, it represents a leap forward in the field, aiming to bridge the gap between imagination and visual representation without the need for extensive video production resources.  OpenAI’s website.Impact on the Video Generation EcosystemThe introduction of Sora into the market is set to redefine the competitive landscape for startups and established companies alike in the AI-generated video space. Here’s how it impacts other players:      Runway AI: A generative AI video editing platform, enabling users to produce short video clips from text prompts.        Stability AI: Entered the video generation domain with Stable Video Diffusion, a model for generating videos from images.        Inworld AI: Specializes in creating AI-powered characters for video games and digital entertainment, using natural language processing for lifelike interactions.        Steve.ai: An online platform transforming text prompts into animated videos, targeting content creators for efficient video production.  Other notable companies in this space include:      Synthesia: For professional-looking AI videos from text.        Deepbrain AI: For conversational AI avatars and AI video generator.        Pika: Focuses on editing and generating videos from captions and still images.        Neosapience: Featuring Typecast’s Online AI Voice Generator for video content.  Opportunities for Creators and BusinessesSora opens up a world of possibilities for visual artists, filmmakers, and designers, providing them with a tool to bring their visions to life without the traditional barriers of video production. This democratization of content creation has the potential to spur a new wave of creativity and innovation, enabling personalized and engaging content across various sectors, including education, marketing, and entertainment.Look at some amazing video examples here OpenAI’s website."
    } ,
  
    {
      "title"    : "Using Crew AI to detect fake news with your own LLM",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/fight-fake-news-with-crew-ai'>Using Crew AI to detect fake news with your own LLM<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2024-02-07T13:19:35+05:00'>07 February 2024</time> – <span class='article__minutes'>6min read</span> </div><p class='article__excerpt'>The one time I used crew ai to detect fake news</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/ollama' class='article__tag'>ollama</a><a href='/tag/openhermes' class='article__tag'>openhermes</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "ollama and openhermes",
      "url"      : "/fight-fake-news-with-crew-ai",
      "date"     : "2024-02-07 13:19:35 +0500",
      "content"  : "I found out about crew ai some time ago. While the use of multiple AT agents to perform a task is not something new. Crew AI serves as a framework to make this a lot more easier. The best part is that it lets you define your agents and their tasks in a very organized manner. I have been playing with it for a while now and I did a small experiment to see if I could use it to detect fake news.One of the most powerful features that Crew AI has is the ability to have your agents use  tools in their tasks. For example you can have a agent use the following tool to search the web@tool("Search the internet")def search_internet(query):"""Useful to search the internet about a a given topic and return relevant results"""url = "https://google.serper.dev/search"payload = json.dumps({"q": query})headers = {    'X-API-KEY': os.environ['SERPER_API_KEY'],    'content-type': 'application/json'}response = requests.request("POST", url, headers=headers, data=payload)results = response.json()['organic']string = []for result in results:    string.append('\n'.join([        f"Title: {result['title']}", f"Link: {result['link']}",        f"Snippet: {result['snippet']}", "\n-----------------"    ]))return '\n'.join(string)By default Crew AI uses openai’s api, you need to have the OPENAI_API_KEY as a env var available. But would it not be fun if we could use our own model? I have been playing with openhermes so I decided to give it a shot and voila! I was able to use it with crew ai.Here is a small snippet of the code from my crews repo:from crewai import Agent, Task, Crew, Processfrom langchain.tools import toolfrom langchain.llms import Ollamaollama_llm = Ollama(model="openhermes")from langchain.tools import DuckDuckGoSearchRunsearch_tool = DuckDuckGoSearchRun()# Define your CrewAI agents and tasks# Define Agentsfact_checking_agent = Agent(    role='Fact-Checking Agent',    goal='Verify the factual accuracy of the news article or statement.',    backstory='Expert in data verification and fact-checking, skilled in discerning truth from fiction in news reporting.',    tools=[search_tool],    verbose=True,    llm=ollama_llm)political_analyst_agent = Agent(    role='Political Analyst Agent',    goal='Provide context and political analysis on Pakistan.',    backstory='Specializes in South Asian geopolitics, focusing on Pakistan.',    verbose=True,    llm=ollama_llm)media_bias_analyst_agent = Agent(    role='Media Bias Analyst Agent',    goal='Assess potential biases in the news source.',    backstory='Expert in media studies, focusing on detecting biases in news reporting.',    verbose=True,    llm=ollama_llm)public_sentiment_analyst_agent = Agent(    role='Public Sentiment Analyst Agent',    goal='Gauge public reaction to the news.',    backstory='Skilled in analyzing public opinion and sentiment on social media and online forums.',    tools=[search_tool],    verbose=True,    llm=ollama_llm)# Define a function to integrate the tools with CrewAIdef analyze_news_article(content):    fact_checking_task = Task(        description=f'Analyze the news article: {content} for factual accuracy. Final answer must be a detailed report on factual findings.',        agent=fact_checking_agent    )    political_analysis_task = Task(        description=f'Analyze the political context of the news article: {content}. Final answer must include an assessment of the current political situation and its credibility.',        agent=political_analyst_agent    )    media_bias_analysis_task = Task(        description=f'Evaluate the news source: {content} for biases and report on potential influences on the article\'s narrative. Final answer must include an analysis of media bias.',        agent=media_bias_analyst_agent    )    public_sentiment_analysis_task = Task(        description=f'Analyze public reaction to the news: {content} on social media and forums. Final answer must summarize public sentiment.',        agent=public_sentiment_analyst_agent    )    crew = Crew(        agents=[fact_checking_agent, political_analyst_agent, media_bias_analyst_agent, public_sentiment_analyst_agent],  #  agents        tasks=[fact_checking_task,political_analysis_task, media_bias_analysis_task, public_sentiment_analysis_task],    #  tasks        process=Process.sequential, # currently the only way it works        verbose=True    )    result = crew.kickoff()    return result#  usagefinal_result = analyze_news_article("Feb 8 2024 Elections have been cancelled in Pakistan. The government has declared a state of emergency. The military has taken over the country.")print(final_result)As you can see I am using DuckDuckGo as a tool and openhermes as the LLM. The result is a detailed report on the news article. I am still playing with it and I am sure I can make it better. But I am happy with the results so far. My news article is a fake news around the delay of elections in Pakistan. As I am writing this post, elections are due tomorrow. My crew was able to successfuly research and provide its findings on the news article. This was the output i got:  Based on the context provided, it appears that the news article is outdated or incorrect as elections are still scheduled for February 8, 2024 in Pakistan and no state of emergency or military takeover has been reported.Pretty cool right? I am excited to see what else we can do with this. I have barely began to scratch the surface. You can checkout crew ai here."
    } ,
  
    {
      "title"    : "Gesture Recognition with Python OpenCV",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/gesture-recognition-with-python'>Gesture Recognition with Python OpenCV<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2024-01-21T16:19:35+05:00'>21 January 2024</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>The one about when i taught myself how to recognize gesture with python</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/todayilearned' class='article__tag'>todayilearned</a><a href='/tag/python' class='article__tag'>python</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "todayilearned and python",
      "url"      : "/gesture-recognition-with-python",
      "date"     : "2024-01-21 16:19:35 +0500",
      "content"  : "A long time ago I was part of a competition where people were presenting and building some great ideas. One such startup that really inspired me was trying to build an app to recognize ASL(American Sign Language) and PSL(Pakistan Sign Language). To no one’s surprise they won the competion, however down the line 4 years from that day, that startup now works as a event management company and provides sign language interpreters for such events.We promise big, but we deliver small. It has been part of a norm here in Pakistan. Anyhow, since I’ve never had much experience working with Computer Vision, I decided to give it a shot and see if how hard it would be build a simple gesture recognition python script. Turns out, its not that hard. I was able to build a simple app that recognizes a few gestures.The only dependencies are opencv-python and mediapipe. You can install them using pip:pip install opencv-python mediapipeHere is the code:Enjoy!"
    } ,
  
    {
      "title"    : "Code Roaster GPT",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/code-roaster-gpt'>Code Roaster GPT<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2024-01-03T00:19:35+05:00'>03 January 2024</time> – <span class='article__minutes'>4min read</span> </div><p class='article__excerpt'>The one about the time I made a GPT that roasts your code (and you)</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/chatgpt' class='article__tag'>chatgpt</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "chatgpt",
      "url"      : "/code-roaster-gpt",
      "date"     : "2024-01-03 00:19:35 +0500",
      "content"  : "While experimenting with building my own GPTs, I stumbled upon a fascinating idea. What if we could train a GPT on code and utilize it to roast code? Intrigued by the concept, I decided to give it a shot. As a result Roasty was born. Roasty is a fiesty little GPT that roasts your code (and you). While its a novel idea, its the prompt that matters and the results. So far Roasty has roasted my code and me pretty well. It has also roasted some of my friends and their code.As an example here is the code snippet from my encodedecode.lol side project.&lt;template&gt;  &lt;div&gt;    &lt;div class="form-group"&gt;        &lt;textarea class="form-control" v-model="inputText" placeholder="Ready for some Base64 sorcery? Input your text!" id="floatingTextarea"&gt;&lt;/textarea&gt;        &lt;br /&gt;        &lt;div class="d-flex justify-content-end"&gt;          &lt;button type="button" @click="convertTo64" :disabled="isEncoded" class="btn btn-primary" :style="{ 'marginRight': '10px' }"&gt;Encode&lt;/button&gt;          &lt;button type="button" @click="convertFrom64" :disabled="!isEncoded" class="btn btn-secondary"&gt;Decode&lt;/button&gt;        &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;  &lt;script lang="ts"&gt;  import { defineComponent } from 'vue'    export default defineComponent({    name: 'ConvertTo64',    methods: {      convertTo64() {       this.inputText = btoa(this.inputText)       this.isEncoded = true      },      convertFrom64() {        this.inputText = atob(this.inputText)        this.isEncoded = false      }    },    data() {      return {        inputText: '',        isEncoded: false      }    }  })  &lt;/script&gt;}This is what Roasty had to say about it:Ah, Vue.js meets Base64 – the peanut butter and jelly of web development, but with a side of "What were they thinking?"First off, let's address the elephant in the room: `convertTo64` and `convertFrom64`. Ah, naming methods like they're Transformers characters. Optimus Encode and Decodetron, roll out! But seriously, how about `encodeToBase64` and `decodeFromBase64`? It's like a gift to your future self who won't remember what "64" stood for.And then, `this.isEncoded`. I appreciate the effort to track state, but what happens when someone decodes and then re-encodes? Do we just flip-flop this boolean like a politician in election season? Consider tracking the state more robustly.Oh, and speaking of robust – `btoa` and `atob` – the good ol' built-in duo. They're great until they meet non-Latin1 characters and throw a tantrum like a toddler denied candy. Maybe consider handling that so your app doesn't crash when it encounters an emoji. 🙃Now, let's talk about your template. It's like a minimalist painting - there's beauty in simplicity, but a few more strokes wouldn't hurt. How about some validation or user feedback? Let the user know if something went wrong, or if they're trying to decode a string that wasn't encoded in the first place. We don't want to be decoding gibberish, do we?Lastly, the inline style in the button – `:style="{ 'marginRight': '10px' }"`. Inline styles are like seasoning – a little goes a long way, but too much and you'll ruin the dish. Maybe consider a class? Keep it clean, keep it maintainable.In summary:1. Rename your methods for clarity.2. Improve your state tracking.3. Handle non-Latin1 characters.4. Provide user feedback and validation.5. Avoid inline styles.But hey, you've got the basics down. Now, just polish it until it shines brighter than a bald man's head under a spotlight! 🌟via GIPHYAs you can see it not only roasted me but also provided some useful feedback. I am planning to use this in my code reviews from now own. Specially when I am reviewing code from my friends. Let me know what you think about this idea. You can try it out here."
    } ,
  
    {
      "title"    : "Code for All Summit 2023",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/code-for-all-summit-2023'>Code for All Summit 2023<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2023-10-20T09:33:35+05:00'>20 October 2023</time> – <span class='article__minutes'>2min read</span> </div><p class='article__excerpt'>The one about the 10th Anniversary of Code for All.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/tutorials' class='article__tag'>tutorials</a><a href='/tag/best-practices' class='article__tag'>best-practices</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "tutorials and best-practices",
      "url"      : "/code-for-all-summit-2023",
      "date"     : "2023-10-20 09:33:35 +0500",
      "content"  : "This year marked the 10th anniversary of the Code for All, a premier gathering for civic tech enthusiasts worldwide. The summit provided a unique platform to discuss, explore, and evaluate the impact of civic tech on a global scale. I had the honor of participating in a panel discussion on open-source technology and delivering a lightning talk on one of our community efforts, “Flood Light.”The Open-Source Panel: More Than Just HypeThe panel discussion aimed to assess the true replicability of open-source software across civic tech. I was joined by experts like Olivia Vereha from Code for Romania and Xavier Frankline from Code for Africa. We discussed why open-source works, citing examples from organizations like Mozilla and civic tech projects like Decidim. The consensus was clear: open-source is not just a buzzword; it’s a viable approach for civic tech solutions.Flood Light: A Community-Led Crisis ResponseIn 2022, Pakistan faced a catastrophic climate event that led to widespread devastation. In response, Code for Pakistan launched Flood Light, an initiative to create a comprehensive data platform for flood mapping. My colleague Mubassir Hayat and I shared how this effort successfully mapped over 1,500 relief camps and connected those in need with international donors and volunteers. You can watch the full lightning talk here.Key Takeaways from Flood LightWe highlighted the transformative power of community-led initiatives in crisis response. The project was a quick solution developed overnight using Ushahidi, collecting over 2,000 data points through crowdsourcing. This data was then used by the government and aid organizations to provide relief to the affected people.Other Highlights and Future DirectionsThe summit had several sessions on AI and civic tech, which resonated with our ongoing project, Numainda. It was motivating to see that we are on the right track. I was particularly inspired by Olivia Vereha’s stories and look forward to networking more with like-minded organizations like Code for Romania.ConclusionThe Code for All Summit 2023 was an enriching experience that left me motivated to continue our work at Code for Pakistan. The summit served as a reminder of the transformative power of technology when used for the greater good. As we move forward, our focus remains on empowering the community and creating a lasting impact.Additional Resources  Code for All Summit 2023  Numainda on GitHub  Flood Light Lightning Talk  Open-Source Panel DiscussionFeel free to share, comment, and stay tuned for more updates on our projects and community efforts!Tags#CodeForAllSummit2023 #CivicTech #OpenSource #CommunityLedInitiatives #FloodLight #CrisisResponse #numainda #AI #Networking #CodeForPakistan #CodeForRomania #CodeForAfrica"
    } ,
  
    {
      "title"    : "The Importance of HTTP Status Codes in Microservice and API Development",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Http-Status-Codes'>The Importance of HTTP Status Codes in Microservice and API Development<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2023-10-20T09:33:35+05:00'>20 October 2023</time> – <span class='article__minutes'>2min read</span> </div><p class='article__excerpt'>Had a discussion with a colleague about HTTP status codes and thought I&#39;d share my thoughts on the topic.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/tutorials' class='article__tag'>tutorials</a><a href='/tag/best-practices' class='article__tag'>best-practices</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "tutorials and best-practices",
      "url"      : "/Http-Status-Codes",
      "date"     : "2023-10-20 09:33:35 +0500",
      "content"  : "Recently, I had a small argument with a colleague who suggested that one of our developers should determine whether a request failed or succeeded based on the returned string—specifically, whether it was empty or not. While this might seem like a straightforward approach, I strongly believe that decisions should be based on HTTP status codes, not the content of the response string. Here’s why.The Role of HTTP Status CodesHTTP status codes are issued by a server in response to a client’s request. They fall into various categories, each serving a specific purpose:2xx (Success): Indicates that the client’s request was successfully received and processed.3xx (Redirection): Suggests that further action needs to be taken to complete the request.4xx (Client Error): Signifies that the client seems to have made an error.5xx (Server Error): Indicates that the server failed to fulfill a valid request.Why Are They Important?Clarity and Consistency: Using standard HTTP status codes makes it easier for developers to understand the outcome of an API call without having to dig into the response payload.Debugging and Troubleshooting: Status codes can quickly point developers to the root cause of an issue, whether it’s a client-side mistake or a server-side error.Automation: Automated systems can easily interpret these codes and take appropriate actions, such as retrying a failed request or logging an error for future investigation.Monitoring and Analytics: Tracking the frequency of various status codes can provide valuable insights into API health and usage patterns.User Experience: Proper use of status codes can help in creating a more responsive and user-friendly application by handling different scenarios gracefully.best-practicesUse the most specific status code for each operation. For example, use 201 Created for resource creation and 204 No Content for a successful delete operation.Avoid using generic status codes like 200 OK for all successful operations, as it doesn’t provide enough context about what happened in the server.Always include a message body to elaborate on the status code, especially in the case of client and server errors.ConclusionHTTP status codes are an integral part of API and microservice development. They offer a standardized way to communicate the status of HTTP requests, making it easier for both humans and machines to understand what’s happening. By using HTTP status codes effectively, developers can build more robust, efficient, and user-friendly applications.So, the next time you find yourself in a debate about whether to use status codes or response strings to indicate the outcome of an API call, remember the many benefits that come with sticking to standard HTTP status codes. It could make all the difference in your project’s success."
    } ,
  
    {
      "title"    : "insults.dev, an LLM based Insult Generator for devs",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/chat-gpt-insult-generator'>insults.dev, an LLM based Insult Generator for devs<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2023-09-05T00:45:00+05:00'>05 September 2023</time> – <span class='article__minutes'>2min read</span> </div><p class='article__excerpt'>Learning Prompt Engineering with GPT-3</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/gpt-3' class='article__tag'>gpt-3</a><a href='/tag/prompt-engineering' class='article__tag'>prompt-engineering</a><a href='/tag/vue' class='article__tag'>vue</a><a href='/tag/python' class='article__tag'>python</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "gpt-3, prompt-engineering, vue, and python",
      "url"      : "/chat-gpt-insult-generator",
      "date"     : "2023-09-05 00:45:00 +0500",
      "content"  : "In the grand tradition of friendly banter among developers, I embarked on a journey to create a tool that could generate light-hearted, non-offensive insults for programmers. Why, you ask? Well, because who doesn’t love a good-natured jest about their favorite (or not-so-favorite) programming language? And thus, insults.dev was born.Insults.dev is a web application that serves up playful jabs at developers based on their chosen programming language or framework. Built using Vue.js for the frontend and FastAPI for the backend. The real star of the show, however, is OpenAI’s GPT-3, a language model so advanced it can generate text that’s almost indistinguishable from human writing. And in this case, it’s been trained to be a comedic genius.Prompt engineering is a bit like telling a joke. You need to set it up just right to get the punchline to land. In the case of insults.dev, the punchline is the insult, and the setup is the prompt I feed to GPT-3. It took a bit of trial and error, but eventually, I found the sweet spot that consistently produced insults that were funny, relevant, and just a bit cheeky. Here is what my generate_insult function looks like:def generate_insult(language):    prompt = f" \        Generate insult for a developer of {language}. "        messages =  [        {            "role":"system",            "content":"You are a developer insult generator that gets a \                programming language or framework as input from the user and \                    generates a not very offensive insult.",        },        {            "role": "user",            "content": prompt,        }    ]        response = openai.ChatCompletion.create(        model="gpt-3.5-turbo-0613",        messages=messages    )    insult = response.choices[0].message.content    return { "insult":insult, "language":language , "prompt":prompt}This project is part of my learning journey to get better at prompt engineering and build more significant applications that utilize LLMs. The code is all available under MIT License here at Github. I hope you enjoy it as much as I enjoyed building it. And if you have any suggestions for improvements, please feel free to open an issue or submit a pull request.via GIPHY"
    } ,
  
    {
      "title"    : "Up &amp; Running with PostgreSQL with Docker",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/up-running-with-postgresql-with-docker'>Up &amp; Running with PostgreSQL with Docker<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2023-07-06T00:03:00+05:00'>06 July 2023</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>A docker compose file to quickly sping up a PostgreSQL instance with PG admin</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/docker' class='article__tag'>docker</a><a href='/tag/postgresql' class='article__tag'>postgresql</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "docker and postgresql",
      "url"      : "/up-running-with-postgresql-with-docker",
      "date"     : "2023-07-06 00:03:00 +0500",
      "content"  : "If you are like me and need a quick way to spin up a PostgreSQL instance with PG admin, here is a docker compose file that you can use to do that.version: '3'services:  db:    image: postgres:15    restart: always    env_file:      - .env    ports:      - "5432:5432"    volumes:      - db-data:/var/lib/postgresql/data  pgadmin:    image: dpage/pgadmin4    restart: always    env_file:      - .env    ports:      - "8090:80"    volumes:      - pgadmin-data:/var/lib/pgadmin    depends_on:      - dbvolumes:  db-data:  pgadmin-data:your .env file should look something like this:POSTGRES_USER=postgresPOSTGRES_PASSWORD=examplePOSTGRES_DB=mydatabasePGADMIN_DEFAULT_EMAIL=admin@example.comPGADMIN_DEFAULT_PASSWORD=exampleNow all you need to dop is run docker-compose -f &lt;yourfile&gt;.yml up -d and you should be good to go. The PG admin will be available at http://localhost:8090 and you can use the credentials from your .env file to login. You will need to grab your docker container’s ip address to connect to the database from your local machine. You can do that by running docker inspect &lt;container-id&gt; | grep "IPAddress".Enjoy!Photo by Kevin Ku on Unsplash"
    } ,
  
    {
      "title"    : "My Favorite Video Games in Wes Anderson Style",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/video-games-as-wes-anderson-creations'>My Favorite Video Games in Wes Anderson Style<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2023-06-30T12:03:00+05:00'>30 June 2023</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>I love using Midjourney and the matter of fact we have Wes Anderson in our universe. So I tried to reimagine some of my favorite video games in Wes Anderson style.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/midjourney' class='article__tag'>midjourney</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "midjourney",
      "url"      : "/video-games-as-wes-anderson-creations",
      "date"     : "2023-06-30 12:03:00 +0500",
      "content"  : "I recently tweeted a thread about this but just in case adding them all here as well.The WitcherSpider-ManGod of WarThe Legend of ZeldaMetal Gear SolidAnimal CrossingMass EffectFinal FantasySkyrimCyberpunk: 2077Personally I would love to see a collab between Kojima San and Mr. Anderson. I think they would make a great team."
    } ,
  
    {
      "title"    : "Docker Environment Variables vs Arguments",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Docker-Args-and-Env-Vars'>Docker Environment Variables vs Arguments<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2023-05-20T15:03:00+05:00'>20 May 2023</time> – <span class='article__minutes'>2min read</span> </div><p class='article__excerpt'>Docker how to set environment variables vs args and when to use what.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/docker' class='article__tag'>docker</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "docker",
      "url"      : "/Docker-Args-and-Env-Vars",
      "date"     : "2023-05-20 15:03:00 +0500",
      "content"  : "I have worked with docker for over 7 years now and I still get confused about the difference between environment variables and arguments. In this post I try to simplify the distinction and explain when to use what.Whats the difference between ENV and ARG variables and why should I care?ARG and ENV in Dockerfile  ARG and ENV are ways to define variables in a Dockerfile.ARG variables  ARG variables are only available during the build process.  ARG variables are used to pass values to the Dockerfile.ENV variables  ENV variables are available to running containers.  ENV variables are used to set environment variables for running containers.Using ARG and ENV together  You can use ARG values to set ENV values. This is a common way to set default values for environment variables.  For example, you could use an ARG variable to specify the name of a package to install, and then use an ENV variable to set the path to the installed package.The following image from VSUPALOV illustrated this beautifully..How do I use ARGs and ENV Vars?Using ARGsAs stated above these need to be passed and defined before the build process. You would define an ARG in your Dockerfile like this:ARG my_mighty_argRUN echo "the value of my mighty arg is $my_mighty_arg"What this does is it lets Docker know that this image we are builidng should expect an argument called my_mighty_arg. A value for which we will pass when we are building our image like this:docker build --build-arg my_mighty_arg=a_mighty_value .so when we run this we should see something like this:the value of my mighty arg is a_mighty_valueThats it the ARG has served its purpose and will not be available beyond the docker build scope.Using ENV VARSOn the other hand ENV VARS are available to the running container. Imagine passing information to your continaer via env var that populates itself through a build time ARG. You can define an ENV VAR in your Dockerfile like this:ARG my_might_argENV env_var_name=$my_might_argAnother way is to simple pass the ENV VAR in the command line:docker run -e env_var_name=a_mighty_value .ConclustionIn conclusion, ARG and ENV variables are both useful tools for defining variables in a Dockerfile. ARG variables are only available during the build process and are used to pass values to the Dockerfile, while ENV variables are available to running containers and are used to set environment variables for running containers. You can use ARG values to set ENV values, which is a common way to set default values for environment variables. By understanding the difference between ARG and ENV variables, you can better manage your Docker images and containers and ensure that your applications run smoothly.Photo by Philippe Oursel on Unsplash"
    } ,
  
    {
      "title"    : "Learning SwiftUI by building a URL Shortener iOS App",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Swiftui-url-shortener'>Learning SwiftUI by building a URL Shortener iOS App<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2023-03-22T10:19:00+05:00'>22 March 2023</time> – <span class='article__minutes'>2min read</span> </div><p class='article__excerpt'>From Objective-C to SwiftUI, rediscovering iOS Development through Building a URL Shortener App</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/swiftui' class='article__tag'>swiftui</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "swiftui",
      "url"      : "/Swiftui-url-shortener",
      "date"     : "2023-03-22 10:19:00 +0500",
      "content"  : "Rediscovering iOS Development: From Objective-C to SwiftUII ws a iOS developer in a past life who started his career more than eight years ago, I have seen firsthand the remarkable evolution of the iOS ecosystem. Back in the day, Objective-C was the go-to language for developing iOS applications, and we had to deal with manual memory management without the luxury of Automatic Reference Counting (ARC). Today, we have SwiftUI, a powerful and intuitive framework that makes it easier than ever to create beautiful user interfaces across all Apple platforms.Starting with SwiftUIApple introduced SwiftUI at WWDC 2019 as a powerful, easy-to-use UI toolkit that enables developers to design apps for iOS, macOS, watchOS, and tvOS using Swift code. With its declarative syntax, SwiftUI simplifies the process of building user interfaces by allowing developers to describe the UI’s appearance and behavior.As I began my SwiftUI journey, I found Apple’s official SwiftUI tutorials to be an excellent starting point. They cover the fundamentals of building user interfaces, as well as more advanced topics like data flow and animations. Additionally, I discovered several online resources, such as articles, YouTube videos, and Stack Overflow threads, that provided invaluable insights and assistance throughout my learning process.Building a URL Shortener iOS AppAfter familiarizing myself with SwiftUI concepts and syntax, I decided to create a URL shortener iOS app. This project would serve as a practical way to solidify my understanding and apply the knowledge I had acquired..The app I built is straightforward: users enter a long URL into a text field, tap a button to generate a short URL using the Bitly API, and the resulting short URL is copied to the user’s clipboard. To ensure smooth interactions with the Bitly API, I chose to integrate the Alamofire library, which simplifies the process of making network requests.During the development of the app, I encountered several challenges that deepened my understanding of SwiftUI. First, I learned about the @State, @ObservedObject, and @Published property wrappers, which are crucial for managing data flow and state changes in SwiftUI. Second, I explored how to present alerts based on state changes and handle user input validation. Overall, this project served as an excellent hands-on introduction to SwiftUI.Moving ForwardMy experience building the URL shortener app reinforced the importance of practice and real-world application when learning a new programming language or framework. By diving into SwiftUI and working on a practical project, I was able to grasp concepts more effectively and identify areas that required further study.This journey has been a testament to how far iOS development has come since my early days working with Objective-C. As I continue to explore SwiftUI and apply my knowledge to more complex projects, I’m excited about the endless possibilities—from building productivity apps to creating games or even designing tools to help fellow developers. I’m eager to see where my SwiftUI journey takes me next and how it will shape my future as a developer.The app code is open source and available on GitHub."
    } ,
  
    {
      "title"    : "KYC using Plaid in a swiftui app",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Plaid-for-KYC-in-swiftui'>KYC using Plaid in a swiftui app<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2023-03-09T20:19:00+05:00'>09 March 2023</time> – <span class='article__minutes'>6min read</span> </div><p class='article__excerpt'>KYC is a very important part of any financial app. Here&#39;s how you can use Plaid to do it in a swiftui app.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/swiftui' class='article__tag'>swiftui</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "swiftui",
      "url"      : "/Plaid-for-KYC-in-swiftui",
      "date"     : "2023-03-09 20:19:00 +0500",
      "content"  : "I am working on something very cool these days. I am not ready to make it public yet but I can tell you that it’s a fintech app. And it’s going to be awesome!Going back to my roots as an iOS engineer I took a deep dive into SwiftUI. I am in love with its imperative style and the fact that it’s so easy to use. I am also a big fan of Combine and the fact that it’s built into SwiftUI makes it even better.We have to use Plaid for a key function of the app to do KYC. I was a bit worried about how to do it in SwiftUI. But it turned out to be pretty easy. Here’s how you can do it in your SwiftUI app.PrerequisitesA Plaid accountXcode 13 or laterA basic understanding of SwiftUI and MVVM architectureStep 1: Install Plaid SDKThe first step is to install the Plaid SDK in your project. Plaid provides SDKs for iOS, Android, and web applications. In this tutorial, we will be using the iOS SDK.You can install the SDK using Cocoapods, Carthage, or Swift Package Manager. For this tutorial, we will use Cocoapods. Add the following line to your Podfile:pod 'Plaid'Then, run the following command to install the SDK:pod installStep 2: Create a Plaid AccountIf you haven’t already, create a Plaid account and sign up for the KYC service. You will need to provide some information about your app and your company. After you sign up, you will receive a client_id and public_key that you will use to authenticate your requests.Step 3: Create a Plaid ConfigurationCreate a PlaidConfiguration object with your client_id and public_key. You can also set other options such as the environment (sandbox or production) and the country.let configuration = PlaidConfiguration(clientID: "your_client_id", publicKey: "your_public_key", environment: .sandbox, country: .US)Step 4: Present Plaid Link ViewPlaid Link is a pre-built UI component that allows users to securely connect their bank accounts. To present the Plaid Link view, create a PlaidLinkView with your configuration and present it using a sheet.struct ContentView: View {  @State private var isPresentingPlaidLinkView = false  @State private var plaidLinkToken: String?  var body: some View {    VStack {      Button("Connect Bank Account") {        isPresentingPlaidLinkView = true      }      .sheet(isPresented: $isPresentingPlaidLinkView) {        PlaidLinkView(token: plaidLinkToken, configuration: configuration) { result in          switch result {          case .success(let token):            plaidLinkToken = token            // handle success          case .failure(let error):            // handle failure          }          isPresentingPlaidLinkView = false        }      }    }  }}Step 5: KYC using PlaidYou can use Plaid to perform Know Your Customer (KYC) verification using the PlaidLinkView. KYC verification is an important step in financial transactions to ensure that you are complying with regulations and avoiding fraud.To perform KYC verification using the PlaidLinkView, you can use Plaid’s Identity API. The Identity API allows you to retrieve various types of personal information about the user, such as name, address, and date of birth, from their linked financial accounts. You can use this information to verify the user’s identity and perform KYC checks.Here’s an example of how you could use the Identity API to retrieve the user’s name and address after they successfully link their financial account using the PlaidLinkView:let linkView = PlaidLinkView(    configuration: .makeTestConfiguration(),    onSuccess: { success, completion in        PLKPlaid.createToken(            with: .sandbox,            publicKey: "YOUR_PUBLIC_KEY",            institution: .tartan,            selectAccount: nil,            accountFilters: nil,            publicToken: success.publicToken        ) { result in            switch result {            case .success(let tokenResponse):                let request = PLKGetIdentityRequest(                    accessToken: tokenResponse.accessToken                )                PLKPlaid.client().getIdentity(with: request) { result in                    switch result {                    case .success(let identityResponse):                        let name = identityResponse.accounts.first?.owners.first?.name                        let address = identityResponse.accounts.first?.owners.first?.addresses.first?.data?.city                        // Use the name and address for KYC verification                        completion(true)                    case .failure(let error):                        // Handle the error                        print("Failed to retrieve identity: \(error.localizedDescription)")                        completion(false)                    }                }            case .failure(let error):                // Handle the error                print("Failed to create token: \(error.localizedDescription)")                completion(false)            }        }    },    onFailure: { exit, error in        // Handle the failure        print("Plaid Link exited with error: \(error?.localizedDescription ?? "")")    })present(linkView)In this example, we create a PlaidLinkView and present it. When the user successfully links their financial account, the onSuccess closure is called with a PLKSuccess object and a completion handler. Inside the closure, we call the PLKPlaid.createToken method to exchange the publicToken for an access token. If the exchange is successful, we use the access token to retrieve the user’s name and address using the PLKGetIdentityRequest and PLKPlaid.client().getIdentity method. If there is an error, we handle it by printing an error message. If the user exits Plaid Link before linking their account, the onFailure closure is called with a PLKExit object and an optional error. In this example, we handle the failure by printing an error message.You can modify this example to retrieve other types of personal information using the Identity API, such as date of birth and social security number, depending on your KYC requirements. Be sure to review Plaid’s documentation and comply with their requirements and regulations for handling user data.You can checkout Plaid’s documentation here"
    } ,
  
    {
      "title"    : "Using inject and provide in vue 3",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Inject-and-Provide-in-vue-3'>Using inject and provide in vue 3<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2023-03-06T00:19:00+05:00'>06 March 2023</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>I recently learned how to do dependency injection in vue 3. Here&#39;s how you can use it in your projects.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/vue3' class='article__tag'>vue3</a><a href='/tag/javascript' class='article__tag'>javascript</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "vue3 and javascript",
      "url"      : "/Inject-and-Provide-in-vue-3",
      "date"     : "2023-03-06 00:19:00 +0500",
      "content"  : "Vue 3 has some cool new features, including “inject” and “provide”, which allow you to share data between parent and child components without having to pass it down as props. This makes your components more modular and reusable.“Provide” is used in the parent component to provide data, which can be anything like a string, object, or function. “Inject” is used in the child component to get access to that data.For example, let’s say you have a “message” variable in your parent component that you want to share with your child component. You can use “provide” to make that happen:// Parent Component&lt;script&gt;import { provide } from 'vue';export default {  setup() {    const message = 'Hello from parent!';    provide('message', message);    return {      message,    };  },};&lt;/script&gt;Then, in your child component, you can use “inject” to get that “message” variable:// Child Component&lt;script&gt;import { inject } from 'vue';export default {  setup() {    const message = inject('message');    return {      message,    };  },};&lt;/script&gt;By using “provide” and “inject”, you can make your Vue 3 components more efficient and organized. Plus, the syntax is super easy to use!You can read more here."
    } ,
  
    {
      "title"    : "Job Opening MEAN Stack Developer",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Job-Opening-Mean-stack-dev'>Job Opening MEAN Stack Developer<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2022-12-14T21:52:00+05:00'>14 December 2022</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>A friend is looking for a kickass MEAN stack developer. Are you the one?</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/job opening' class='article__tag'>job opening</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "job opening",
      "url"      : "/Job-Opening-Mean-stack-dev",
      "date"     : "2022-12-14 21:52:00 +0500",
      "content"  : "Position: Mean Stack Developer (Full-time)Experience : 2+ yearsLocation : Islamabad, Pakistan (Remote)Job Description  A flexible, proactive attitude to work and must have an Agile mindset.  Previous working experience as a MEAN Stack Developer for at least 2 years.  Expert Level Knowledge of HTML, CSS and JavaScript (including ES6).  Strong knowledge of data structures and algorithms  Excellent communications skills both verbal and written.  Understanding of non-relational and relational databases such as MongoDB, SQL.  Good hands-on experience using Angular  Experience in integrating third party APIs and services.  Ability to learn quickly and operate in a fast-paced environment.  Basic knowledge of python and flask api.Responsibilities  Developing web-based applications using the MEAN stack, including Angular, Node.js, and MongoDB  Creating RESTful services with Node.js  Writing unit test and integration tests  Writing re-useable, testable, and efficient codeNice to Haves  Experience working with a remote team.  Understanding of Continuous Integration and Deployment process.If you think you fit the bill, please send your resume to SaqibHussain990@gmail.com with the subject line “MEAN Stack Developer”. Please include a link to your portfolio or GitHub profile."
    } ,
  
    {
      "title"    : "Same day skunk works",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Same-day-skunk-works'>Same day skunk works<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2022-11-22T13:56:00+05:00'>22 November 2022</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>Buidling unexpected tools in unexpected ways.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/100daysofcode' class='article__tag'>100daysofcode</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "100daysofcode",
      "url"      : "/Same-day-skunk-works",
      "date"     : "2022-11-22 13:56:00 +0500",
      "content"  : "I came across this really interesting experiment by A.E Studio. They have taken this initiative to launch a tool every day. Most of us who build Saas for a living understand the importance of skunkworks software. Check out their intiative Same Day Skunk Works. Maybe you will find the motivation to build that Saas you have been thinking about for a while."
    } ,
  
    {
      "title"    : "Proof of Stake vs Proof of Work",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Proof-of-stake-vs-proof-of-work'>Proof of Stake vs Proof of Work<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2022-11-02T02:28:00+05:00'>02 November 2022</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>The Ethereum ecosystem got an upgrade. We saw it. We felt it. But what is it?</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/ethereum' class='article__tag'>ethereum</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "ethereum",
      "url"      : "/Proof-of-stake-vs-proof-of-work",
      "date"     : "2022-11-02 02:28:00 +0500",
      "content"  : "I have loved the ethereum ecosystem ever since its inception. Sadly I have not yet gottent the opportunity to do any mainstream project on it other than some code labs for practice. We are living in wonderful times, we have witnessed a true transiton in the that breaks a monopoly and makes the system more fair. Allow me to explain in a few lines.The Ethereum network is a decentralized blockchain that allows for the creation of smart contracts, decentralized applications (Dapps), and other decentralized applications (dapps). The network has two types of consensus: Proof of Work and Proof of Stake.Proof of Work (PoW) is a system in which miners compete to be the first to solve a hash problem and earn the right to add a block to the chain. Miners are rewarded with ether for their work.Proof of Stake (PoS) is a system where users who hold tokens on their Ethereum wallets earn interest for their holdings through transaction fees. Users can also choose to stake their currency, which means they lock up their funds as collateral until they receive more tokens than they’ve staked. This means that users essentially lend their money to people who have asked them if they want to use it as collateral while they mine new ether or look for blocks to win rewards from mining pools.To summarize here is a little matrix:                        Proof of Work            Proof of Stake                            Miners compete to solve a hash problem and earn the right to add a block to the chain            Users who hold tokens on their Ethereum wallets earn interest for their holdings through transaction fees                            Miners are rewarded with ether for their work            Users can also choose to stake their currency, which means they lock up their funds as collateral until they receive more tokens than they've staked                            Requires a lot of compute power            Does not require a lot of compute power            Photo by Nenad Novaković on Unsplash"
    } ,
  
    {
      "title"    : "What is docker",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/What-is-Docker'>What is docker<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2022-10-25T16:33:35+05:00'>25 October 2022</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>The age old question a lot of devs still dont know the answer to.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/docker' class='article__tag'>docker</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "docker",
      "url"      : "/What-is-Docker",
      "date"     : "2022-10-25 16:33:35 +0500",
      "content"  : "Docker is a containerization platform that allows us to deploy our applications inside a container and then we can easily ship that container anywhere.Docker uses the host operating system kernel, this makes docker containers really lightweight because you don’t have to have a guest OS inside your container. This also means that you can run any type of application you want inside it since the OS is the same as the host OS.Docker containers are isolated from each other, they share the same host OS, this means that if a container gets compromised other containers will not get affected.You can create multiple services using docker e.g. If your project consists of front-end and back-end technologies, you can create separate images for both front &amp; back then connect them together to form a complete application.Docker lets you build, run, test and deploy your code in an easy wayHere is a slide deck I created to explain docker in a simple way:"
    } ,
  
    {
      "title"    : "FloodLight",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Flood-Light'>FloodLight<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2022-09-01T13:33:35+05:00'>01 September 2022</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>Crowdsourcing flood data to help the community</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/civic tech' class='article__tag'>civic tech</a><a href='/tag/code for all' class='article__tag'>code for all</a><a href='/tag/code for pakistan' class='article__tag'>code for pakistan</a><a href='/tag/gov 2.0' class='article__tag'>gov 2.0</a><a href='/tag/pakistan flood' class='article__tag'>pakistan flood</a><a href='/tag/open data' class='article__tag'>open data</a><a href='/tag/crowd sourcing' class='article__tag'>crowd sourcing</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "civic tech, code for all, code for pakistan, gov 2.0, pakistan flood, open data, and crowd sourcing",
      "url"      : "/Flood-Light",
      "date"     : "2022-09-01 13:33:35 +0500",
      "content"  : "Pakistan has been hit by the worst flood ever this year. At the time of writing this post, the flood affected a total of over 1.5 million people. Here are a few stats:            Deaths      INJURED      ROADS DESTROYED      BRIDGES DESTROYED      HOUSES DESTROYED      LIVESTOCK DEATHS                  1061      1575      3475km      157      992870      727144      While many organizations are doing the best they can to assist. Our small team at Code for Pakistan took it upon ourselves to try and crowdsource as much data as we can. Hence floodlight, something we cooked up in a few hours. You can check it out here.Photo by Jéan Béller on Unsplash"
    } ,
  
    {
      "title"    : "Covid Positive Day 1",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/covid-diaries-episode-1'>Covid Positive Day 1<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2022-01-06T20:53:35+05:00'>06 January 2022</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>I am covid positive, what am i thinking?</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/covid-diaries' class='article__tag'>covid-diaries</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "covid-diaries",
      "url"      : "/covid-diaries-episode-1",
      "date"     : "2022-01-06 20:53:35 +0500",
      "content"  : "Photo by CDC on Unsplash"
    } ,
  
    {
      "title"    : "Dockerize your angular app",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Dockerize-your-angular-app'>Dockerize your angular app<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2022-01-01T00:24:35+05:00'>01 January 2022</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>Something all angular devs must know how to do. Kick names and take ass!</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/angular' class='article__tag'>angular</a><a href='/tag/docker' class='article__tag'>docker</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "angular and docker",
      "url"      : "/Dockerize-your-angular-app",
      "date"     : "2022-01-01 00:24:35 +0500",
      "content"  : "Happy 2020 Too! If you stubmled across this post searching for how to run your uber cool angular app using docker, you are at the right place. Lets start at the begining. This is how you would normally create a new angular app:ng new my-appCool! Now here is what I do with my Dockerfile:FROM node:14-alpine as buildWORKDIR /usr/local/appCOPY ./ /usr/local/app/RUN npm installRUN npm run startNow normally this will be it but I am going kick it up a notch.I am going to run my app on nginx using multi stage docker builds. This will help us run the app as if it would run on a production server:FROM node:14-alpine as buildWORKDIR /usr/local/appCOPY ./ /usr/local/app/RUN npm installRUN npm run buildFROM nginx:latestCOPY --from=build /usr/local/app/dist/my-app /usr/share/nginx/htmlEXPOSE 80Thats it! Thats the post.Photo by Ian Taylor on Unsplash"
    } ,
  
    {
      "title"    : "Adding RSS feed to your Jekyll Powered Site",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/adding-rss-feed-to-your-jekyll-site'>Adding RSS feed to your Jekyll Powered Site<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-12-14T01:33:35+05:00'>14 December 2021</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'></p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/jekyll' class='article__tag'>jekyll</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "jekyll",
      "url"      : "/adding-rss-feed-to-your-jekyll-site",
      "date"     : "2021-12-14 01:33:35 +0500",
      "content"  : "You just built your uber cool jekyll site. You just deployed it on your server. Whats this?! No RSS Feeds! Don’t sweat, I got you. See its pretty simple. you just have to do two things.Add the jekyll-feed gem to your Gemfilegem 'jekyll-feed'Add it to your _config.yml file under pluginsplugins:- jekyll-feed  Run bundle installbundle installThat’s it. Once you build or run your website, your RSS feed will be accessible at yoursite.com/feed.xml. You are welcome. 🦄Photo by RetroSupply on Unsplash"
    } ,
  
    {
      "title"    : "Fund for Engineers who want to buy an Xbox",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Fund-for-engineers-who-want-an-xbox'>Fund for Engineers who want to buy an Xbox<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-12-10T17:01:35+05:00'>10 December 2021</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>Yes you read that right</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/gaming' class='article__tag'>gaming</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "gaming",
      "url"      : "/Fund-for-engineers-who-want-an-xbox",
      "date"     : "2021-12-10 17:01:35 +0500",
      "content"  : "I am planning to make a fund to help engineers like me who can afford an Xbox but are not being allowed to buy one. You can help this glorious purpose by taking a simple poll:Click here and support the cause"
    } ,
  
    {
      "title"    : "Pakistan’s National Anthem - Why do we forget?",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/National-Anthem-why-we-forget'>Pakistan’s National Anthem - Why do we forget?<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-10-15T17:01:35+05:00'>15 October 2021</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>A super cool guy and his friends did a thing at 3 AM</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/coding' class='article__tag'>coding</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "coding",
      "url"      : "/National-Anthem-why-we-forget",
      "date"     : "2021-10-15 17:01:35 +0500",
      "content"  : "While searching for something entirely different we came across a discussion on quora that prompted us to think, why can’t any of us remember our national anthem?“Wish we had a way of reading the national anthem without having to search for it on google”, said Saqib. The rest is history. We immediately bought a domain, set up a GitHub repo and hunted for TTF files for a variant Nastaliq font. Within 30 minutes we deployed qomitarana.comSo the next time you need to remind yourself what our national anthem’s words are. Remember it’s just a URL away. Oh, and the Qomi Tarana project is open source. Feel free to contribute and make it grow. Pakistan Zindabad!"
    } ,
  
    {
      "title"    : "Comments on clean code",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Comments-on-clean-code'>Comments on clean code<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-09-09T17:01:35+05:00'>09 September 2021</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>Whoever edited uncle bob&#39;s clean code videos deserves a darwin award</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/coding' class='article__tag'>coding</a><a href='/tag/best-practices' class='article__tag'>best-practices</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "coding and best-practices",
      "url"      : "/Comments-on-clean-code",
      "date"     : "2021-09-09 17:01:35 +0500",
      "content"  : "So Recently at Code for Pakistan our VP Tech. made it abundantly clear that we ought to watch Uncle Bob’s clean code video lectures. It’s a really good series of videos that make you think about the code you write everyday.This post is not about the video series but rather about the comments I found very true and witty. Whenever Uncle Bob asks the audience to focus on a particular slide the editor cuts away and focuses on the Uncle Bob’s face. Still don’t know what I am talking about? I will let the following comments explain:  I love that no matter what background we’re coming from, no matter part of the world we are from, we are united in our hatred for the video editor.  Uncle Bob: look at this piece of codeCameraman: ah I think it’s the signal for a zoom shot of uncle bob’s face  Uncle Bob: Look at thisEditor: haha you wish  “clean code - lesson 2”starts talking about the origin on the mooncamera man points at an empty sofaMe: wtf am I watching  I love the lecture, but I want to make the person who edited the video write on an old chalk blackboard “I will not obscure information” about 5000x  I have got a big list of slangs for the editor  Whoever edited this: when he says “look at this” - show the board, not the person!I hope the comments explain the level of unprofessionalism of the video editing. Thats all for now, keep writing clean code you all!"
    } ,
  
    {
      "title"    : "Awesome Civic Tech Ideas",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Awesome-civic-tech-ideas'>Awesome Civic Tech Ideas<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2020-11-28T17:01:35+05:00'>28 November 2020</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>When you are having hard time trying to find something to fix</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/civic tech' class='article__tag'>civic tech</a><a href='/tag/code for all' class='article__tag'>code for all</a><a href='/tag/code for pakistan' class='article__tag'>code for pakistan</a><a href='/tag/gov 2.0' class='article__tag'>gov 2.0</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "civic tech, code for all, code for pakistan, and gov 2.0",
      "url"      : "/Awesome-civic-tech-ideas",
      "date"     : "2020-11-28 17:01:35 +0500",
      "content"  : "Have you ever wondered what you can do more for your city? Are you a developer with some really good software skills? Do you hunger to solve problems that a common citizen faces?If you are trying to find an awesome idea to work on in your free time, then look no further because we at Code for Pakistan has this amazing curated list of civic tech ideas on our Github. It’s an open-source list we are trying to maintain.Have a really cool idea that you think should be on the list? Feel free to fork and submit a pull request.If you do end up working on any of the above ideas, please do let me know. I would love to help in any way I can."
    } ,
  
    {
      "title"    : "Redeploying gov.uk Part-1",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Redeploying-gov-uk'>Redeploying gov.uk Part-1<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2020-11-26T17:01:35+05:00'>26 November 2020</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>Repurpose e-democracy</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/civic tech' class='article__tag'>civic tech</a><a href='/tag/code for all' class='article__tag'>code for all</a><a href='/tag/code for pakistan' class='article__tag'>code for pakistan</a><a href='/tag/gov 2.0' class='article__tag'>gov 2.0</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "civic tech, code for all, code for pakistan, and gov 2.0",
      "url"      : "/Redeploying-gov-uk",
      "date"     : "2020-11-26 17:01:35 +0500",
      "content"  : "Some unique and exciting circumstances require us to redeploy gov.uk for a government stakeholder. If I am honest, this seems like a huge undertaking. As cool as this sounds, the whole project scares me. I mean, look at this architecture diagram:To get this behemoth of a project right, I am trying to understand its guts. It’s not your typical off the mill web application that you can fork, customize, and rebuild. It is more of a tech stack to build applications on top off.The recommended way to build applications for gov.uk is to use their docker based dev environment. Let’s see how far I get. This is the first of a series of posts I will be making on this expedition"
    } ,
  
    {
      "title"    : "Up and Running with TimescaleDB",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/Up-and-Running-TimescaleDB'>Up and Running with TimescaleDB<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2020-04-08T10:33:35+05:00'>08 April 2020</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>Crowdsourcing flood data to help the community</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/open-source' class='article__tag'>open-source</a><a href='/tag/tutorials' class='article__tag'>tutorials</a><a href='/tag/todayilearned' class='article__tag'>todayilearned</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "open-source, tutorials, and todayilearned",
      "url"      : "/Up-and-Running-TimescaleDB",
      "date"     : "2020-04-08 10:33:35 +0500",
      "content"  : "I’ve been getting into time-series databases over the past few months. I got into playing with TimescaleDB and was super impressed with its capabilities. One of the important things to understand is that TimescaleDB is just Postgres at its core which means technically TimescaleDB is an extension. Following is my usual MO to quickly run an instance of TimescaleDB.Getting a docker container up:docker run -d --name timescaledb -p 5434:5434 -e POSTGRES_PASSWORD=password timescale/timescaledb:latest-pg11Connecting to said docker container:docker exec -it timescaledb psql -U postgresCreating your database:CREATE database tstutorial;Connecting to your new database:\c tstutorialAdding the TimescaleDB extension:CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;That’s it! Now you have a dockerized TimescaleDB instance up and running."
    } 
  
]
